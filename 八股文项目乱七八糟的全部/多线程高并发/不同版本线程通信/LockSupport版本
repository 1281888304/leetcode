默认是和释放锁无关，单纯的用工具类根据名字唤醒线程/阻塞线程.

这里有一个要注意的，t2上来就park了把锁让出去，所以t2限制性，睡一秒然后t1在执行。

如果t1先执行，唤醒t2，但是t2没有阻塞，所以无法唤醒，是这个意思吗。一定要t2先阻塞，然后t1才能唤醒。避免t1执行到唤醒t2这个指令的时候，t2线程万一没有阻塞，这样两个线程就都阻塞住了

可以这样理解，不能同时跑，有可能t2还没有执行到阻塞那一步，t1线程就过来叫醒了（这一步之后t1就阻塞了），然后叫醒失败，两个线程同时阻塞在park那一步

```` 
package 生产者消费者;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.LockSupport;

public class LockSupportThreadCommunicate {
  private static Thread t1,t2;

  public static void main(String[] args) throws InterruptedException {
    char[] chars1="12345".toCharArray();
    char[] chars2="ABCDE".toCharArray();

    t1=new Thread(()->{
      for(char c: chars1){
        System.out.println(c);
        LockSupport.unpark(t2);//叫醒t2
        LockSupport.park(t1);//阻塞t1
      }
    },"t1");

    t2=new Thread(()->{
      for(char c: chars2){
        //为了让t1先打印，直接一开始就阻塞t2
        LockSupport.park(t2);
        //被叫醒以后打印
        System.out.println(c);
        //打印完阻塞自己，唤醒t1
        LockSupport.unpark(t1);
//        LockSupport.park(t2);
      }
    },"t1");

    //TimeUnit.SECONDS.sleep(1);
    t2.start();
    t1.start();
    



  }

}

````



