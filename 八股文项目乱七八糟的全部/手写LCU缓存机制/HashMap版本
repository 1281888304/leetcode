记得remove的时候，map里也要remove

```` 
class LRUCache {
    private int size;
    private int capacity;
    private Node head;
    private Node tail;
    private Map<Integer,Node> map=new HashMap<>();
    
    //private HashMap<Integer,Node> cache=new HashMap<>();

    public LRUCache(int capacity) {
        this.size=0;
        this.capacity=capacity;
        this.head=new Node();
        this.tail=new Node();
        head.next=tail;
        tail.prev=head;
        
    }
    //用hashMap定位
    public int get(int key) {
        
        Node node=map.get(key);
        if(node==null){
            return -1;
        }
        moveToHead(node);
        return node.val;
    }
    
    public void put(int key, int value) {
        Node node=map.get(key);
        if(node==null){
            Node newNode=new Node(key,value,null,null);
            map.put(key,newNode);
            addToHead(newNode);
            size++;
            if(size>capacity){
                Node oldTail=removeTail();
                map.remove(oldTail.key);
                size--;
            }
        }
        else{
            node.val=value;
            moveToHead(node);
        }
        
        
        
    }
    
    
    //先建立node的两条线，再去弄别人的
    private void addToHead(Node node){
        node.prev = head;
        node.next = head.next;
        head.next.prev = node;
        head.next = node;


    }
    
    private void removeNode(Node node){
        node.prev.next=node.next;
        node.next.prev=node.prev;
    }
    
    private void moveToHead(Node node){
        removeNode(node);
        addToHead(node);
    }
    
    private Node removeTail(){
        Node res=tail.prev;
        removeNode(res);
        return res;
    }
    
    private class Node{
        int key;
        int val;
        Node next;
        Node prev;
        
        public Node(int _key,int _val,Node _next,Node _prev){
            this.key=_key;
            this.val=_val;
            this.next=_next;
            this.prev=_prev;
        }
        
        public Node(){}
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
````
